//https://leetcode.com/problems/top-k-frequent-elements/


vector<int> topKFrequent(vector<int>& nums, int k) {
        
        map<int, int> mp;
        vector<int> ans(k);
        
        for (int i=0; i<nums.size(); i++){
           mp[nums[i]]++;
        }

        priority_queue <pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
        
        for (auto i=mp.begin(); i!=mp.end(); i++){
            pq.push({i->second, i->first});
            
            if(pq.size()>k){
                pq.pop();
            }
            
        }
        
        for(int i=k-1; i>=0; i--){
            ans[i] = pq.top().second;
            pq.pop();
        }
        
        return ans;
        
    }
    
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> map;
        for(int num : nums){
            map[num]++;
        }
        
        vector<int> res;
        // pair<first, second>: first is frequency,  second is number
        priority_queue<pair<int,int>> pq; 
        for(auto it = map.begin(); it != map.end(); it++){
            pq.push(make_pair(it->second, it->first));
            if(pq.size() > (int)map.size() - k){
                res.push_back(pq.top().second);
                pq.pop();
            }
        }
        return res;
    }
