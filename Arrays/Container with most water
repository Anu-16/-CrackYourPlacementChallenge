//https://leetcode.com/problems/container-with-most-water/

//------------------------------------------------TC: O(N2) will receive TLE  SC: O(1)------------------------------------------

int maxArea(vector<int>& height) {
        
        int area = INT_MIN;
        for (int i=0; i<height.size()-1; i++){
            int k=1;
            for (int j=i+1; j<height.size(); j++){
                
                int factor = min(height[i], height[j]);
                area = max(area, factor*k);
                
                
                k++;
            }
        }
        
        return area;
    }
    
    
    
//------------------------------------------------------------------OPTIMISED APPROACH---------------------------------------------------------------------------------------------------
//------------------------------------------------O(N) Solution, O(1) constant space----------------------------------------------------------------------

int maxArea(vector<int>& height) {
        
        
        int left = 0;
        int right = height.size() - 1;
        int maxi = 0;
        while(left < right){
            int w = right - left;
            int h = min(height[left], height[right]);
            int area = h * w;
            maxi = max(maxi, area);
            if(height[left] <= height[right]) left++;
            else if(height[left] > height[right]) right--;
            
        }
        return maxi;
    }
