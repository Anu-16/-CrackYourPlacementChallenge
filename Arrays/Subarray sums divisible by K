//https://leetcode.com/problems/subarray-sums-divisible-by-k/

-------------------------------------------------------TC: O(N3) Creating all the possible subarrays and calculating sum of each array

int subarraysDivByK(vector<int>& nums, int k) {
        int divByK = 0;
        int n = nums.size();
        for (int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                int sum=0;
                for (int k=i; k<=j; k++){
                    sum += nums[k];
                }
                if(sum%k==0){
                    divByK++;
                }
            }
        }
        
        
        return divByK;
    }
    
    
    -------------------------------------------------------TC: O(N) SC: O(N)
 
    
    int subarraysDivByK(vector<int>& nums, int k) {
        int divByK = 0;
        int n = nums.size();
        int sum = 0;
        int rem = 0;
        
        unordered_map<int, int> ump;
        ump[0] = 1;
        
        for (int i=0; i<n; i++){
            sum += nums[i];
            rem = sum%k;
            
            if (rem<0){
                rem += k;             // in order to make negative remainder a positive
            }
            
            if(ump.find(rem) != ump.end()){
                divByK += ump[rem];
                ump[rem]++;
            }
            else{
                ump[rem] = 1;
            }
        }
        
        return divByK;
    }
