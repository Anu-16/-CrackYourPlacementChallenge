//https://leetcode.com/problems/find-the-duplicate-number/

//--------------------------------------------------TC: O(N) SC: O(N) : NOT CONSTANT SPACE--------------------------------------------------

int findDuplicate(vector<int>& nums) {
        unordered_map<int, int>ump;
        
        for (auto a: nums){
            ump[a]++;
        }
        
        for(auto a: ump){
            if (a.second>1){
                return (a.first);
            }
        }
        
        return -1;
        
    }
    
    //--------------------------------------------------Floyd's Algo TC: O(N) SC: O(1) CONSTANT SPACE--------------------------------------------------


    int findDuplicate(vector<int>& nums) {

        // Find the intersection point of the two runners.
        int tortoise = nums[0];
        int hare = nums[0];

        do {
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        } while (tortoise != hare);

        // Find the "entrance" to the cycle.
        tortoise = nums[0];
        while (tortoise != hare) {
            tortoise = nums[tortoise];
            hare = nums[hare];
        }

        return hare;
    }
